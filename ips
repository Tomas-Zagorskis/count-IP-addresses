#!/usr/bin/env lua

print()
print('\27[36m---------------------------------------------------------------------------------------------------')
print("It's a program that receives two IPv4 addresses and returns the number of addresses between them")
print('---------------------------------------------------------------------------------------------------\27[0m')
print()
--[[
Splits and converts an IP String to an integer 
  
param inputIp {string} An IP Address in the form a.b.c.d
return {int} a number of the IP address
]]

local function ipToInt(inputIp)
  local ipTable={}
  local i = 1
  for str in string.gmatch(inputIp, "[%d]+") do
    ipTable[i] = tonumber(str)
    i = i + 1
  end
  local numOfIp = 0
  local multiply = 1
  for j = 4, 1, -1 do
    numOfIp = numOfIp + ipTable[j] * multiply
    multiply = multiply * 256
  end
  return numOfIp
end

--[[
Ip validation

param ip {string} An IP Address in the form a.b.c.d
]]

local function ip6Validation(ip)
  if not string.match(ip, "^[%x]+:[%x]+:[%x]+:[%x]+:[%x]+:[%x]+:[%x]+:[%x]+$") then
    error('\27[31m- invalid IPv6 format\27[0m', 2)
  end
  for str in string.gmatch(ip, "[%x]+") do
    if string.len(str) > 4 then
      error("\27[31m- invalid IPv6 format\27[0m", 2)
    end
  end
end

local function ip4Validation(ip)
  if not string.match(ip, "^[%d]+%.[%d]+%.[%d]+%.[%d]+$") then
    error('\27[31m- invalid IPv4 format\27[0m', 2)
  end
  for str in string.gmatch(ip, "[%d]+") do
    if tonumber(str) > 255 then
      error("\27[31m- one of ip's fragment number is bigger then 255\27[0m", 2)
    end
  end
end

--[[
Calculates the number of IP addresses between the first one and the second.
  
param ip1 {integer} a number of IP address.
param ip2 {integer} a number of IP address.
]]

local function numberBetweenIps(ip1, ip2)
  local numDiff = ip2 - ip1
  print('--------------------------------------')
  io.write('\27[32m- The number between ips is ', numDiff, '\27[0m\n')
  print()
end

local status1 = false
local status2 = false
local err, input1, input2, ip1Num, ip2Num;
while not status1 do
  io.write('- Write first IPv4: ')
  input1 = io.read()
  status1, err = pcall(ip4Validation, input1)
  if not status1 then
    print(err)
  else
    ip1Num = ipToInt(input1)
  end
end
while not status2 do
  io.write('- Write second IPv4 (must be bigger): ')
  input2 = io.read()
  status2, err = pcall(ip4Validation, input2)
  if not status2 then
    print(err)
  else
    ip2Num = ipToInt(input2)
    if ip1Num >= ip2Num then
      print('\27[31m- please, write second IP bigger\27[0m')
      status2 = false
    else
      numberBetweenIps(ip1Num, ip2Num)
    end
  end
end
