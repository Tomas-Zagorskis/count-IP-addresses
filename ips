#!/usr/bin/env lua

--[[
Splits and converts an IP String to a table of integers 
  
param inputIp {string} An IP Address in the form a.b.c.d
return {table} a table of integers representation of the IP address
]]
local function splitIp(inputIp)
  local aTable={}
  local i = 1
  for str in string.gmatch(inputIp, "[%d]+") do
    aTable[i] = tonumber(str)
    i = i + 1
  end
  return aTable
end

--[[
Ip validation

param ip {string} An IP Address in the form a.b.c.d
]]

local function ipValidation(ip)
  if not string.match(ip, "^[%d]+%.[%d]+%.[%d]+%.[%d]+$") then
    error('invalid ip format', 2)
  end
  for str in string.gmatch(ip, "[%d]+") do
    if tonumber(str) > 255 then
      error("one of ip's fragment number is bigger then 255", 2)
    end
  end
end

--[[
Calculates the number of IP addresses between the first one and the second.
  
@param ip1 {string} An IP Address in the form a.b.c.d
@param ip2 {string} An IP Address in the form a.b.c.d
]]

local function numberBetweenIps(ip1, ip2)
  local ips1Table = splitIp(ip1)
  local ips2Table = splitIp(ip2)
  local diffIndex = 0
  
  for i = 1, 4 do
    if (ips1Table[i] ~= ips2Table[i]) then
      diffIndex = i
      break
    end
  end

  local numDiff = 0
  local multiply = 1
  
  for j = 4, diffIndex, -1 do
    numDiff = numDiff + (ips2Table[j] - ips1Table[j]) * multiply
    multiply = multiply * 256
  end
  print('--------------------------------------')
  io.write('- The number between ips is ', math.abs(numDiff), '\n')
  print()
end

local status1 = false
local status2 = false
local err, input1, input2;
while not status1 do
  io.write('- Write first IPv4: ')
  input1 = io.read()
  status1, err = pcall(ipValidation, input1)
  if not status1 then
    print(err)
  end
end
while not status2 do
  io.write('- Write second IPv4: ')
  input2 = io.read()
  status2, err = pcall(ipValidation, input2)
  if not status2 then
    print(err)
  end
end
numberBetweenIps(input1, input2)
